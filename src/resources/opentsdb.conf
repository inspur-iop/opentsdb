# --------- NETWORK ----------
# The TCP port TSD should use for communications
# *** REQUIRED ***
tsd.network.port = 4242

# The IPv4 network address to bind to, defaults to all addresses
tsd.network.bind = 0.0.0.0

# Disable Nagel's algorithm, default is True
#tsd.network.tcp_no_delay = true

# Determines whether or not to send keepalive packets to peers, default
# is True
#tsd.network.keep_alive = true

# Determines if the same socket should be used for new connections, default
# is True
#tsd.network.reuse_address = true

# Number of worker threads dedicated to Netty, defaults to # of CPUs * 2
tsd.network.worker_threads = 8

# Whether or not to use NIO or tradditional blocking IO, defaults to True
#tsd.network.async_io = true

# ----------- HTTP -----------
# The location of static files for the HTTP GUI interface.
# *** REQUIRED ***
tsd.http.staticroot = /tmp/opentsdb/static

# Where TSD should write it's cache files to
# *** REQUIRED ***
tsd.http.cachedir = /tmp/opentsdb/caches

# --------- CORE ----------
# Whether or not to automatically create UIDs for new metric types, default
# is False
tsd.core.auto_create_metrics = true

# Whether or not to enable the built-in UI Rpc Plugins, default
# is True
tsd.core.enable_ui = true

# Whether or not to enable the built-in API Rpc Plugins, default
# is True
tsd.core.enable_api = true

#user role and permissions storage
tsd.core.user.storage=hbase
tsd.core.user.table=tsdb-user
tsd.core.role.permissions.info=[{"role":"admin", uris:["/api/user/put","/api/user/query","/api/user/del","/api/aggregators","/api/put","/api/rollup","/api/query","/api/config","/api/dropcaches","/api/rollup","/api/histogram","/api/search","/api/serializers","/api/stats","/api/suggest","/api/tree","/api/uid","/api/version"]},{"role":"ro", uris:["/api/query","/api/version"]},{"role":"wo", uris:["/api/put","/api/version"]},{"role":"rw", uris:["/api/put","/api/query","/api/version"]}]

#tsd.core.authentication.enable=false
tsd.core.authentication.enable=true
tsd.core.plugin_path=/tmp/opentsdb/plugins
tsd.core.authentication.plugin=com.inspur.tsdb.auth.HBaseAuthentication
#tsd.search.enable = true
#tsd.search.plugin = net.opentsdb.search.ElasticSearch
#tsd.search.elasticsearch.host = http://yxl1:8080

# --------- STORAGE ----------
# Whether or not to enable data compaction in HBase, default is True
tsd.storage.enable_compaction = true

# How often, in milliseconds, to flush the data point queue to storage,
# default is 1,000
# tsd.storage.flush_interval = 1000

# Max number of rows to be returned per Scanner round trip
# tsd.storage.hbase.scanner.maxNumRows = 128

# Name of the HBase table where data points are stored, default is "tsdb"
#tsd.storage.hbase.data_table = tsdb

# Name of the HBase table where UID information is stored, default is "tsdb-uid"
#tsd.storage.hbase.uid_table = tsdb-uid

# Path under which the znode for the -ROOT- region is located, default is "/hbase"
tsd.storage.hbase.zk_basedir = /hbase-unsecure

# A comma separated list of Zookeeper hosts to connect to, with or without
# port specifiers, default is "localhost"
tsd.storage.hbase.zk_quorum = yxl1:2181,yxl2:2181,yxl3:2181

# --------- COMPACTIONS ---------------------------------
# Frequency at which compaction thread wakes up to flush stuff in seconds, default 10
# tsd.storage.compaction.flush_interval = 10

# Minimum rows attempted to compact at once, default 100
# tsd.storage.compaction.min_flush_threshold = 100

# Maximum number of rows, compacted concirrently, default 10000
# tsd.storage.compaction.max_concurrent_flushes = 10000

# Compaction flush speed multiplier, default 2
# tsd.storage.compaction.flush_speed = 2
tsd.rollups.enable=true
tsd.rollups.config=/tmp/opentsdb/rollup_config.json